// Generated by CoffeeScript 1.7.1
var Struct, assert;

assert = require('assert');

Struct = require('../lib/struct');

describe('Struct', function() {
  describe('#()', function() {
    it('endian', function() {
      new Struct('x').endian.should.equal('BE');
      new Struct('>x').endian.should.equal('BE');
      return new Struct('<x').endian.should.equal('LE');
    });
    it('single format charactor', function() {
      return new Struct('xbBhHiIfdsR');
    });
    return it('format charactor with size/count', function() {
      return new Struct('2b5s5R');
    });
  });
  it('#size', function() {
    new Struct('x').size.should.equal(1);
    new Struct('bB').size.should.equal(2);
    new Struct('hH').size.should.equal(4);
    new Struct('iI').size.should.equal(8);
    new Struct('f').size.should.equal(4);
    new Struct('d').size.should.equal(8);
    new Struct('4x').size.should.equal(4);
    return new Struct('4I').size.should.equal(16);
  });
  describe('#pack/unpack numbers', function() {
    describe('BE', function() {
      it('signed', function() {
        var buff, numbers, st;
        st = new Struct('bbhhii');
        numbers = [12, -12, 1234, -1234, 12345678, -12345678];
        buff = st.pack.apply(st, numbers);
        return assert.deepEqual(numbers, st.unpack(buff));
      });
      it('unsigned', function() {
        var buff, st;
        st = new Struct('BHI');
        buff = st.pack(0x12, 0x1234, 0x12345678);
        return assert.deepEqual(buff, new Buffer('12123412345678', 'hex'));
      });
      return it('multiple unsigned', function() {
        var buff, st;
        st = new Struct('2B2H');
        buff = st.pack(0x12, 0x23, 0x3456, 0x4567);
        return assert.deepEqual(buff, new Buffer('122334564567', 'hex'));
      });
    });
    return describe('LE', function() {
      it('signed', function() {
        var buff, numbers, st;
        st = new Struct('<bbhhii');
        numbers = [12, -12, 1234, -1234, 12345678, -12345678];
        buff = st.pack.apply(st, numbers);
        return assert.deepEqual(numbers, st.unpack(buff));
      });
      it('unsigned', function() {
        var buff, st;
        st = new Struct('<BHI');
        buff = st.pack(0x12, 0x1234, 0x12345678);
        return assert.deepEqual(buff, new Buffer('12341278563412', 'hex'));
      });
      return it('multiple unsigned', function() {
        var buff, st;
        st = new Struct('<2B2H');
        buff = st.pack(0x12, 0x23, 0x3456, 0x4567);
        return assert.deepEqual(buff, new Buffer('122356346745', 'hex'));
      });
    });
  });
  describe('#pack', function() {
    it('string', function() {
      var buff, st;
      st = new Struct('s2s3s4s', 0x00);
      buff = st.pack('A', 'AB', 'ABCD', 'AB');
      return assert.deepEqual(buff, new Buffer('41414241424341420000', 'hex'));
    });
    it('string fill', function() {
      var buff, st;
      st = new Struct('s2s3s4s', 0xee);
      buff = st.pack('A', 'AB', 'ABCD', 'AB');
      return assert.deepEqual(buff, new Buffer('4141424142434142eeee', 'hex'));
    });
    return it('buffer', function() {
      var buff, st;
      st = new Struct('R2R3R4R', 0xbb);
      buff = st.pack(new Buffer('A'), new Buffer('AB'), new Buffer('ABCD'), new Buffer('AB'));
      return assert.deepEqual(buff, new Buffer('4141424142434142bbbb', 'hex'));
    });
  });
  return describe('#unpack', function() {
    it('string', function() {
      var buff, st;
      st = new Struct('s2s3s4s', 0x00);
      buff = new Buffer('41414241424341420000', 'hex');
      return assert.deepEqual(st.unpack(buff), ['A', 'AB', 'ABC', 'AB\x00\x00']);
    });
    return it('buffer', function() {
      var buff, expected, st;
      st = new Struct('R2R3R4R', 0xbb);
      buff = new Buffer('4141424142434142bbbb', 'hex');
      expected = [new Buffer('A'), new Buffer('AB'), new Buffer('ABC'), new Buffer('4142bbbb', 'hex')];
      return assert.deepEqual(st.unpack(buff), expected);
    });
  });
});
